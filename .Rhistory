gridnum <- dim(griddat)[2]/alts
intnum <- dim(intdat)[2]
if (any(is.na(otherdat$noCgriddat)) == TRUE) {
noCgridnum <- 0
} else {
noCgriddat <- as.matrix(do.call(cbind, otherdat$noCgriddat))
noCgridnum <- dim(noCgriddat)[2]/alts
}
obsnum <- dim(griddat)[1]
startloc <- otherdat$startloc
distance <- otherdat$distance
singlecor <- otherdat$singlecor
polyn <- otherdat$polyn
intpoly <- otherdat$polyintnum
regconstant <- otherdat$regconstant
polyconstant <- otherdat$polyconstant
bw <- otherdat$bw
starts3 <- as.matrix(starts3)
revcoef <- as.matrix(starts3[1:1, ])
View(revcoef)
gridlength <- (gridnum * alts) +
((((polyn + polyconstant) * (1+(1-singlecor))) +
intpoly) * alts)
noCgridlength <- (noCgridnum)
gridcoef <- as.matrix(starts3[2:(1 + gridlength), ])
if (any(is.na(otherdat$noCgriddat)) == TRUE) {
noCgridcoef <- 0
} else {
noCgridcoef <- as.matrix(starts3[(1 + 1 + gridlength):
(1 + gridlength + noCgridlength), ])
}
signum <- 1
intcoef <- as.numeric(starts3[(1 + 1 + gridlength + noCgridlength):
((1 + 1 + gridlength + noCgridlength) + intnum - 1), ])
sigmac <- (1)
# end of vector
sigmaa <- as.matrix(starts3[((1 + 1 + gridlength + noCgridlength +
intnum - 1) + 1), ])
sigmaa <- sqrt(sigmaa^2)
gridbetas <- (matrix(gridcoef[1:(alts * (gridnum)), ], obsnum,
(alts * (gridnum)),
byrow = TRUE) * cbind(griddat))
View(gridbetas)
dim(gridbetas) <- c(nrow(gridbetas), alts, (gridnum))
nrow(gridbetas)
dim(gridbetas) <- c(nrow(gridbetas), alts, (gridnum))
dim(gridbetas) <- c(nrow(gridbetas)*2, alts, (gridnum))
gridbetas <- rowSums(gridbetas, dim = 2)
dim(gridbetas) <- c(nrow(gridbetas), alts)
dim(gridbetas) <- c(nrow(gridbetas), alts, (gridnum)*2)
dim(gridbetas) <- c(nrow(gridbetas), alts, (gridnum)/2)
dim(gridbetas) <- c(nrow(gridbetas), alts, (gridnum))
intbetas <- .rowSums(intdat * matrix(intcoef, obsnum, intnum, byrow = TRUE),
obsnum, intnum)
data(zi)
data(catch)
data(choice)
data(distance)
data(si)
data(startloc)
data(zi)
data(catch)
data(choice)
data(distance)
data(si)
data(startloc)
optimOpt <- c(1000,1.00000000000000e-08,1,0)
methodname <- 'BFGS'
polyn <- 3
kk <- 4
si2 <- sample(1:5,dim(si)[1],replace=TRUE)
zi2 <- sample(1:10,dim(zi)[1],replace=TRUE)
otherdat <- list(griddat=list(si=as.matrix(si),si2=as.matrix(si2)),
intdat=list(zi=as.matrix(zi),zi2=as.matrix(zi2)),
startloc=as.matrix(startloc),polyn=polyn,
distance=as.matrix(distance))
griddat <- as.matrix(do.call(cbind, otherdat$griddat))
View(griddat)
intdat <- as.matrix(do.call(cbind, otherdat$intdat))
gridnum <- dim(griddat)[2]/alts
.Machine$double.xmax
alts = max(choice)
gridnum <- dim(griddat)[2]/alts
intnum <- dim(intdat)[2]
gridlength <- (gridnum * alts)
View(griddat)
gridlength <- (gridnum * alts) +
((((polyn + polyconstant) * (1+(1-singlecor))) +
intpoly) * alts)
polyn <- otherdat$polyn
intpoly <- otherdat$polyintnum
regconstant <- otherdat$regconstant
polyconstant <- otherdat$polyconstant
bw <- otherdat$bw
View(otherdat)
gridlength <- (gridnum * alts) +
((((polyn + polyconstant) * (1+(1-singlecor))) +
intpoly) * alts)
startloc <- otherdat$startloc
distance <- otherdat$distance
singlecor <- otherdat$singlecor
polyn <- otherdat$polyn
intpoly <- otherdat$polyintnum
regconstant <- otherdat$regconstant
polyconstant <- otherdat$polyconstant
bw <- otherdat$bw
gridlength <- (gridnum * alts) +
((((polyn + polyconstant) * (1+(1-singlecor))) +
intpoly) * alts)
gridbetas <- (matrix(gridcoef[1:(alts * (gridnum)), ], obsnum,
(alts * (gridnum)),
byrow = TRUE) * cbind(griddat))
gridcoef <- as.matrix(starts3[2:(1 + gridlength), ])
otherdat <- list(griddat=list(si=as.matrix(si),si2=as.matrix(si2)),
intdat=list(zi=as.matrix(zi),zi2=as.matrix(zi2)),
startloc=as.matrix(startloc),
polyn=polyn,
distance=as.matrix(distance),
polyintnum = polyintnum,
regconstant = regconstant,
polyconstant = polyconstant,
singlecor = singlecor)
polyintnum <- 0
polyconstant <- 1
bw <- 0.90
singlecor <- 1
reltolin <- 9
reltol <- 1*10^(-reltolin)
si2 <- sample(1:5,dim(si)[1],replace=TRUE)
zi2 <- sample(1:10,dim(zi)[1],replace=TRUE)
otherdat <- list(griddat=list(si=as.matrix(si),si2=as.matrix(si2)),
intdat=list(zi=as.matrix(zi),zi2=as.matrix(zi2)),
startloc=as.matrix(startloc),
polyn=polyn,
distance=as.matrix(distance),
polyintnum = polyintnum,
regconstant = regconstant,
polyconstant = polyconstant,
singlecor = singlecor)
View(otherdat)
scaledata <- 100
distancescale <- 100
regconstant <- 0
weightscale <- 1/100
otherdat <- list(griddat=list(si=as.matrix(si),si2=as.matrix(si2)),
intdat=list(zi=as.matrix(zi),zi2=as.matrix(zi2)),
startloc=as.matrix(startloc),
polyn=polyn,
distance=as.matrix(distance),
polyintnum = polyintnum,
regconstant = regconstant,
polyconstant = polyconstant,
singlecor = singlecor)
View(otherdat)
initparams <- c(3, 0.5, 0.4, 0.3, 0.2, 0.55, 0.45, 0.35, 0.25,
rep(0, (((polyn+1)*2) + 2)*kk), -0.3,-0.4, 3)
griddat <- as.matrix(do.call(cbind, otherdat$griddat))
intdat <- as.matrix(do.call(cbind, otherdat$intdat))
gridnum <- dim(griddat)[2]/alts
intnum <- dim(intdat)[2]
source("C:/GitHub/EconAnalysis/Participation/logit_correction_polyint.r", echo=TRUE)
otherdat <- list(griddat=list(si=as.matrix(si),si2=as.matrix(si2)),
intdat=list(zi=as.matrix(zi),zi2=as.matrix(zi2)),
startloc=as.matrix(startloc),
polyn=polyn,
distance=as.matrix(distance),
polyintnum = polyintnum,
regconstant = regconstant,
polyconstant = polyconstant,
singlecor = singlecor,
noCgriddat = NA)
if (any(is.na(otherdat$noCgriddat)) == TRUE) {
noCgridnum <- 0
} else {
noCgriddat <- as.matrix(do.call(cbind, otherdat$noCgriddat))
noCgridnum <- dim(noCgriddat)[2]/alts
}
obsnum <- dim(griddat)[1]
startloc <- otherdat$startloc
starts3 <- as.matrix(starts3)
starts3 <- c(3, 0.5, 0.4, 0.3, 0.2, 0.55, 0.45, 0.35, 0.25,
rep(0, (((polyn+1)*2) + 2)*kk), -0.3,-0.4, 3)
starts3 <- c(3, 0.5, 0.4, 0.3, 0.2, 0.55, 0.45, 0.35, 0.25,
rep(0, (((polyn+1)*2) + 2)*kk), -0.3,-0.4, 3)
starts3 <- as.matrix(starts3)
View(starts3)
revcoef <- as.matrix(starts3[1:1, ])
View(revcoef)
gridlength <- (gridnum * alts) +
((((polyn + polyconstant) * (1+(1-singlecor))) +
intpoly) * alts)
polyintnum <- 0
otherdat <- list(griddat=list(si=as.matrix(si),si2=as.matrix(si2)),
intdat=list(zi=as.matrix(zi),zi2=as.matrix(zi2)),
startloc=as.matrix(startloc),
polyn=polyn,
distance=as.matrix(distance),
polyintnum = polyintnum,
regconstant = regconstant,
polyconstant = polyconstant,
singlecor = singlecor,
noCgriddat = NA)
View(otherdat)
intpoly <- otherdat$polyintnum
gridlength <- (gridnum * alts) +
((((polyn + polyconstant) * (1+(1-singlecor))) +
intpoly) * alts)
noCgridlength <- (noCgridnum)
gridcoef <- as.matrix(starts3[2:(1 + gridlength), ])
View(gridcoef)
if (any(is.na(otherdat$noCgriddat)) == TRUE) {
noCgridcoef <- 0
} else {
noCgridcoef <- as.matrix(starts3[(1 + 1 + gridlength):
(1 + gridlength + noCgridlength), ])
}
signum <- 1
intcoef <- as.numeric(starts3[(1 + 1 + gridlength + noCgridlength):
((1 + 1 + gridlength + noCgridlength) + intnum - 1), ])
sigmac <- (1)
sigmaa <- as.matrix(starts3[((1 + 1 + gridlength + noCgridlength +
intnum - 1) + 1), ])
sigmaa <- sqrt(sigmaa^2)
sigmaa <- sqrt(sigmaa^2)
sigmaa <- as.matrix(starts3[((1 + 1 + gridlength + noCgridlength +
intnum - 1) + 1), ])
sigmaa <- sqrt(sigmaa^2)
View(sigmaa)
gridbetas <- (matrix(gridcoef[1:(alts * (gridnum)), ], obsnum,
(alts * (gridnum)),
byrow = TRUE) * cbind(griddat))
dim(gridbetas) <- c(nrow(gridbetas), alts, (gridnum))
gridbetas <- (matrix(gridcoef[1:(alts * (gridnum)), ], obsnum,
(alts * (gridnum)),
byrow = TRUE) * cbind(griddat))
dim(gridbetas) <- c(nrow(gridbetas), alts, (gridnum))
gridbetas <- (matrix(gridcoef[1:(alts * (gridnum)), ], obsnum,
(alts * (gridnum)),
byrow = TRUE) * cbind(griddat))
View(gridbetas)
View(gridcoef)
gridbetas <- (matrix(gridcoef[1:(alts * (gridnum)), ], obsnum,
(alts * (gridnum)),
byrow = TRUE) * cbind(griddat))
View(griddat)
View(gridbetas)
gridbetas <- (matrix(gridcoef[1:(alts * (gridnum)), ], obsnum,
(alts * (gridnum)),
byrow = TRUE) )
gridbetas <- (matrix(gridcoef[1:(alts * (gridnum)), ], obsnum,
(alts * (gridnum)),
byrow = TRUE) * cbind(griddat))
dim(gridbetas) <- c(nrow(gridbetas), alts, (gridnum))
dim(gridbetas) <- c(nrow(gridbetas), alts)
c(nrow(gridbetas), alts, (gridnum))
dim(gridbetas) <- c(nrow(gridbetas), alts, (gridnum*2))
dim(gridbetas) <- c(nrow(gridbetas), alts, (gridnum)*2)
dim(gridbetas)
gridbetas <- rowSums(gridbetas, dim = 2)
dim(gridbetas) <- c(nrow(gridbetas), alts)
gridbetas <- rowSums(gridbetas, dim = 2)
dim(gridbetas) <- c(nrow(gridbetas), alts, (gridnum)*alts)
dim(gridbetas) <- c(nrow(gridbetas), alts, (gridnum)*4)
dim(gridbetas) <- c(nrow(gridbetas), alts, (gridnum)*3)
dim(gridbetas) <- c(nrow(gridbetas), alts, (gridnum)*2)
dim(gridbetas) <- c(nrow(gridbetas), alts, (gridnum)*1)
dim(gridbetas) <- c(nrow(gridbetas), alts, (gridnum)*1.5)
dim(gridbetas) <- c(nrow(gridbetas), alts, (gridnum)*1.7)
dim(gridbetas) <- c(nrow(gridbetas), alts, (gridnum)*2)
dim(gridbetas) <- c(nrow(gridbetas), alts*2, (gridnum)*2)
dim(gridbetas) <- c(nrow(gridbetas), alts*2, (gridnum))
dim(gridbetas) <- c(nrow(gridbetas), alts, (gridnum))
dim(gridbetas) <- c(nrow(gridbetas), alts, obsnum)
gridbetas <- rowSums(gridbetas, dim = 2)
View(gridbetas)
dim(gridbetas)
gridbetas <- rowSums(gridbetas, dim = 4000)
source("C:/GitHub/EconAnalysis/Participation/logit_correction_polyint.r", echo=TRUE)
gridbetas <- rowSums(gridbetas)
gridbetas
source("C:/GitHub/EconAnalysis/Participation/logit_correction_polyint.r", echo=TRUE)
if (any(is.na(otherdat$noCgriddat)) == TRUE) {
noCgridbetas <- 0
} else {
noCgridbetas <- (matrix(rep(noCgridcoef, each = alts), obsnum,
alts * noCgridnum, byrow = TRUE) * noCgriddat)
dim(noCgridbetas) <- c(nrow(noCgridbetas), alts, noCgridnum)
noCgridbetas <- rowSums(noCgridbetas, dim = 2)
}
intbetas <- .rowSums(intdat * matrix(intcoef, obsnum, intnum, byrow = TRUE),
obsnum, intnum)
View(intdat)
if (any(is.na(otherdat$noCgriddat)) == TRUE) {
betas <- matrix(c((gridbetas * matrix(revcoef, obsnum, alts)), intbetas),
obsnum, (alts + 1))
} else {
betas <- matrix(c((gridbetas * matrix(revcoef, obsnum, alts)), intbetas),
obsnum, (alts + 1)) + cbind(noCgridbetas, rep(0, obsnum))
}
View(betas)
djztemp <- betas[1:obsnum, rep(1:ncol(betas), each = alts)] *
dat[, 3:(dim(dat)[2])]
dataCompile <- create_logit_input(choice)
library(barebones.FishSET)
dataCompile <- create_logit_input(choice)
d <- shift_sort_x(dataCompile, choice, catch, distance, max(choice), ab)
ab <- max(choice) + 1
d <- shift_sort_x(dataCompile, choice, catch, distance, max(choice), ab)
View(d)
dat <- shift_sort_x(dataCompile, choice, catch, distance, max(choice), ab)
djztemp <- betas[1:obsnum, rep(1:ncol(betas), each = alts)] *
dat[, 3:(dim(dat)[2])]
View(djztemp)
View(intdat)
View(djztemp)
dim(djztemp) <- c(nrow(djztemp), ncol(djztemp)/(alts + 1), alts + 1)
djztemp
djztemp <- as.data.frame(djztemp)
dim(djztemp) <- c(nrow(djztemp), ncol(djztemp)/(alts + 1), alts + 1)
djztemp <- betas[1:obsnum, rep(1:ncol(betas), each = alts)] *
dat[, 3:(dim(dat)[2])]
dim(djztemp) <- c(nrow(djztemp), ncol(djztemp)/(alts + 1), alts + 1)
prof <- rowSums(djztemp, dim = 2)
View(prof)
profx <- prof - prof[, 1]
View(profx)
exb <- exp(profx/matrix(sigmac, dim(prof)[1], dim(prof)[2]))
View(exb)
ldchoice <- (-log(rowSums(exb)))
if (any(is.na(otherdat$noCgriddat)) == TRUE) {
revside <- (gridbetas * matrix(revcoef, obsnum, alts))
} else {
revside <- (gridbetas * matrix(revcoef, obsnum, alts)) + noCgridbetas
}
View(revside)
costside <- distance * intbetas
View(distance)
probprof <- revside + costside
probprofx <- probprof - probprof[, 1]
probexb <- exp(probprofx/matrix(sigmac, dim(probprof)[1], dim(probprof)[2]))
View(probexb)
probs <- probexb/matrix(rowSums(probexb), obsnum, alts)
View(probs)
yj <- dat[, 1]
cj <- dat[, 2]
locstay <- model.matrix(~as.factor(startloc) - 1)
locmove <- model.matrix(~as.factor(cj) - 1)
View(locmove)
View(locstay)
View(locmove)
probstay <- probs * locstay
probmove <- probs * locmove
View(probmove)
View(probprof)
probmovesave <<- rowSums(probmove)
sx <- 1-exp(-probmovesave/(bw-probmovesave))
sx[sx<0] <- 1
if (polyconstant == 1) {
suppressWarnings(movemat <- matrix(c(locmove, (matrix(probmove, obsnum,
alts * polyn)^matrix(rep(1:polyn, each = alts), obsnum,
alts * polyn, byrow = TRUE)), (matrix(probmove, obsnum,
alts * intpoly) * matrix(rowSums(probstay), obsnum,
alts * intpoly))^matrix(rep(1:intpoly, each = alts),
obsnum, alts * intpoly, byrow = TRUE)), obsnum, alts *
(polyn + 1 + intpoly)) * matrix(!(startloc == cj),
obsnum, alts * (polyn + 1 + intpoly))
)
staymat <- matrix(c(locstay, (matrix(probstay, obsnum,
alts * polyn)^matrix(rep(1:polyn, each = alts), obsnum,
alts * polyn, byrow = TRUE))), obsnum, alts * (polyn +
1)) * matrix((startloc == cj), obsnum, alts * (polyn +
1))
} else if (polyconstant == 0) {
suppressWarnings(movemat <- matrix(c((matrix(probmove, obsnum, alts *
polyn)^matrix(rep(1:polyn, each = alts), obsnum,
alts * polyn, byrow = TRUE)), (matrix(probmove, obsnum,
alts * intpoly) * matrix(rowSums(probstay), obsnum,
alts * intpoly))^matrix(rep(1:intpoly, each = alts),
obsnum, alts * intpoly, byrow = TRUE)), obsnum, alts *
(polyn + intpoly)) * matrix(!(startloc == cj), obsnum,
alts * (polyn + intpoly))
)
staymat <- matrix(c((matrix(probstay, obsnum, alts *
polyn)^matrix(rep(1:polyn, each = alts), obsnum,
alts * polyn, byrow = TRUE))), obsnum, alts * (polyn)) *
matrix((startloc == cj), obsnum, alts * (polyn))
}
if (singlecor == 1) {
Xvar <- matrix(c(griddat * matrix(locmove, obsnum, gridnum * alts),
(cbind(staymat,
matrix(0, dim(staymat)[1], dim(movemat)[2]-dim(staymat)[2]))
+ movemat)), obsnum, dim(gridcoef)[1])
} else {
Xvar <- matrix(c(griddat * matrix(locmove, obsnum, gridnum * alts), staymat,
movemat), obsnum, dim(gridcoef)[1])
}
if (bw == -1) {
Xvar[,1:alts] <- Xvar[,1:alts]
Xvar[,((alts*gridnum)+1):dim(Xvar)[2]] <- Xvar[,((alts*gridnum)+1):
dim(Xvar)[2]]
} else if (regconstant == 0) {
Xvar[,1:alts] <- (Xvar[,1:alts])
Xvar[,((alts*gridnum)+1):dim(Xvar)[2]] <- Xvar[,((alts*gridnum)+1):
dim(Xvar)[2]]*(1-sx)
} else {
Xvar[,1:alts] <- (Xvar[,1:alts]*sx)
Xvar[,((alts*gridnum)+1):dim(Xvar)[2]] <- Xvar[,((alts*gridnum)+1):
dim(Xvar)[2]]*(1-sx)
}
empcatches <- Xvar %*% gridcoef
View(empcatches)
ldcatch <- matrix((-(0.5) * log(2 * pi)), obsnum) + (-(0.5) *
log(matrix(sigmaa, obsnum)^2)) + (-(0.5) * (((yj - empcatches)/
(matrix(sigmaa, obsnum)))^2))
View(ldcatch)
ld1 <- ldcatch + ldchoice
ld <- -sum(ld1)
if (is.nan(ld) == TRUE) {
ld <- .Machine$double.xmax
}
ldsumglobalcheck <- ld
assign("ldsumglobalcheck", value = ldsumglobalcheck, pos = 1)
paramsglobalcheck <- starts3
assign("paramsglobalcheck", value = paramsglobalcheck, pos = 1)
ldglobalcheck <- unlist(as.matrix(ld1))
assign("ldglobalcheck", value = ldglobalcheck, pos = 1)
return(ld)
ldsumglobalcheck <- ld
assign("ldsumglobalcheck", value = ldsumglobalcheck, pos = 1)
paramsglobalcheck <- starts3
assign("paramsglobalcheck", value = paramsglobalcheck, pos = 1)
ldglobalcheck <- unlist(as.matrix(ld1))
assign("ldglobalcheck", value = ldglobalcheck, pos = 1)
require(foreign)
#> Loading required package: foreign
ml <- read.dta("https://stats.idre.ucla.edu/stat/data/hsbdemo.dta")
require(foreign)
#> Loading required package: foreign
ml <- read.dta("https://stats.idre.ucla.edu/stat/data/hsbdemo.dta")
View(ml)
with(ml, table(ses,prog))
with(ml, do.call(rbind,tapply(write, prog, function(x) c(M = mean(x), SD = sd(x)))))
require(nnet)
ml$prog2 <- relevel(ml$prog, ref = "academic")
View(ml)
ml_pckg <- multinom(prog2 ~ write + ses, data = ml)
summary(ml_pckg)
#> Call:
z <- summary(ml_pckg)$coefficients/summary(ml_pckg)$standard.errors
ml$prog_academic <- ifelse(ml$prog == "academic", 1, 0)
ml$prog_general <- ifelse(ml$prog == "general", 1, 0)
ml$prog_vocational <- ifelse(ml$prog == "vocation", 1, 0)
ml$ses_low <- ifelse(ml$ses == "low", 1, 0)
ml$ses_middle <- ifelse(ml$ses == "middle", 1, 0)
ml$ses_high <- ifelse(ml$ses == "high", 1, 0)
one <- array(1, 200)
covar <- data.matrix(ml[,c(7, 19,20)])
View(covar)
View(ml)
X <- cbind(one,covar) #200*4
View(X)
Y <- ml[, 16:17] #200*2
View(Y)
Y <- ml[, 16:17] #200*2
B_0 <- c(3, -0.1, -0.5, -1, 5, -0.1, 0.2, -1)
xb <- matrix(0, nrow=200, ncol=2) #200*2
View(xb)
B <- matrix(B, nrow=2, ncol=4, byrow=T)
B <- matrix(B0, nrow=2, ncol=4, byrow=T)
B <- matrix(B_0, nrow=2, ncol=4, byrow=T)
View(B)
xb <- X %*% t(B)
exp_xb <- exp(xb) #200*2
View(exp_xb)
View(X)
exp_xb <- exp(xb) #200*2
sumexp <- rowSums(exp_xb) #200*1
sumexp <- as.numeric(sumexp)
sumexp <- rowSums(exp_xb) #200*1
View(exp_xb)
yxb <- Y*xb #200*2
View(Y)
sumexp <- rowSums(exp_xb) #200*1
sumexp <- as.numeric(sumexp)
yxb <- Y*xb #200*2
sumyxb <- sum(yxb)
ll <-  sumyxb-sum(log(1+sumexp))
-ll
mlogit_result <- optim(par = B_0, fn = mlogit)
mlogit <- function(B){
B <- matrix(B, nrow=2, ncol=4, byrow=T)
xb <- X %*% t(B)
exp_xb <- exp(xb) #200*2
sumexp <- rowSums(exp_xb) #200*1
sumexp <- as.numeric(sumexp)
yxb <- Y*xb #200*2
sumyxb <- sum(yxb)
ll <-  sumyxb-sum(log(1+sumexp))
-ll
}
mlogit_result <- optim(par = B_0, fn = mlogit)
mlogit_result
View(z)
xb <- X %*% t(B)
View(X)
xb <- X %*% t(B)
exp_xb <- exp(xb) #200*2
sumexp <- rowSums(exp_xb) #200*1
sumexp <- as.numeric(sumexp)
View(Y)
yxb <- Y*xb
View(yxb)
